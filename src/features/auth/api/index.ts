import axios, { AxiosError } from 'axios';
import { getToken } from '@/shared/lib/utils/token-storage';

/** –ë–∞–∑–æ–≤—ã–π URL –±–µ—Ä—ë–º –∏–∑ .env (EXPO_PUBLIC_API_URL). –î–ª—è –¥–µ–≤–∞ –º–æ–∂–Ω–æ fallback –Ω–∞ localhost. */
const API_URL = process.env.EXPO_PUBLIC_API_URL || 'http://localhost:3000';

/** –ï–¥–∏–Ω—ã–π axios-–∏–Ω—Å—Ç–∞–Ω—Å */
export const apiClient = axios.create({
  baseURL: API_URL,
  timeout: 10000,
  headers: { 'Content-Type': 'application/json' },
});

/** ‚Üí Request interceptor: –¥–æ–±–∞–≤–ª—è–µ–º Bearer-—Ç–æ–∫–µ–Ω –∫–æ –≤—Å–µ–º –∑–∞–ø—Ä–æ—Å–∞–º */
apiClient.interceptors.request.use(async (config) => {
  try {
    const token = await getToken();
    if (token) {
      // –í Axios v1 headers –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–ª–∞—Å—Å AxiosHeaders -> –∏—Å–ø–æ–ª—å–∑—É–µ–º .set
      const h: any = config.headers ?? {};
      if (typeof h.set === 'function') {
        h.set('Authorization', `Bearer ${token}`);
        h.set('Content-Type', h.get?.('Content-Type') ?? 'application/json');
      } else {
        config.headers = {
          ...h,
          Authorization: `Bearer ${token}`,
          'Content-Type': h['Content-Type'] ?? 'application/json',
        };
      }
    }
  } catch {
    // –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–æ—Å—Ç–æ –∏–¥—ë–º –¥–∞–ª—å—à–µ ‚Äî —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—ë—Ç 401
  }

  if (__DEV__) {
    const method = (config.method || 'GET').toUpperCase();
    const url = `${config.baseURL}${config.url}`;
    console.log(`üåê ${method} ${url}`);
    if (config.params) console.log('üîé Params:', config.params);
    if (config.data) console.log('üì§ Request data:', config.data);
  }
  return config;
});

/** ‚Üí Response interceptor: –ª–æ–≥ + –µ–¥–∏–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ */
apiClient.interceptors.response.use(
  (response) => {
    if (__DEV__) {
      console.log('üì• Response:', response.data);
      console.log('üì• Status:', response.status);
    }
    return response;
  },
  (error: AxiosError<any>) => {
    if (__DEV__) {
      console.error('‚ùå API Error Details:');
      console.error('- Message:', error.message);
      console.error('- Code:', (error as any).code);
      console.error('- Response:', error.response?.data);
      console.error('- Status:', error.response?.status);
      console.error('- Headers:', error.response?.headers);
    }

    if (error.response) {
      const status = error.response.status;
      const data = error.response.data as any;
      const serverMsg: string | undefined =
        typeof data === 'string' ? data : data?.message || data?.error;

      switch (status) {
        case 401:
          throw new Error(serverMsg || '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
        case 422:
          throw new Error(serverMsg || '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
        case 500:
          throw new Error(serverMsg || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
        default:
          throw new Error(serverMsg || `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (${status})`);
      }
    } else if (error.request) {
      if (String(error.message).toLowerCase().includes('network')) {
        throw new Error('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
      }
      throw new Error('–ü—Ä–æ–±–ª–µ–º–∞ —Å–µ—Ç–∏ –∏–ª–∏ CORS');
    } else {
      throw new Error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞');
    }
  }
);

/** ===== –¢–∏–ø—ã ===== */
export interface LoginRequest {
  email: string;
  password: string;
}

export interface RegisterRequest {
  username: string;
  email: string;
  password: string;
}

export interface AuthResponse {
  token: string;
  user: {
    id: number;
    email: string;
    username: string;
    uniqueId: string;
  };
}

export interface User {
  id: number;
  email: string;
  username: string;
  uniqueId: string;
}

/** ===== Auth API ===== */

/** POST /auth/login */
export async function login(payload: LoginRequest): Promise<AuthResponse> {
  const { data } = await apiClient.post<AuthResponse>('/auth/login', payload);
  return data;
}

/** POST /auth/register */
export async function register(payload: RegisterRequest): Promise<AuthResponse> {
  const { data } = await apiClient.post<AuthResponse>('/auth/register', payload);
  return data;
}

/**
 * GET /auth/me
 * –ü–∞—Ä–∞–º–µ—Ç—Ä token –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω ‚Äî –∏–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –∏ —Ç–∞–∫ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç.
 * –û—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω, –º—ã —è–≤–Ω–æ –ø—Ä–æ—Å—Ç–∞–≤–∏–º header.
 */
export async function getCurrentUser(token?: string): Promise<User> {
  const { data } = await apiClient.get<User>('/auth/me', {
    headers: token
      ? (h => {
          // —Ç–æ—Ç –∂–µ —Ç—Ä—é–∫ —Å AxiosHeaders
          if (typeof (h as any).set === 'function') {
            (h as any).set('Authorization', `Bearer ${token}`);
            return h;
          }
          return { ...(h || {}), Authorization: `Bearer ${token}` };
        })((apiClient.defaults.headers.common as any) ?? {})
      : undefined,
  });
  return data;
}

/**
 * POST /auth/logout (–µ—Å–ª–∏ —É –±—ç–∫–∞ –Ω–µ—Ç ‚Äî –º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥)
 * –ü–∞—Ä–∞–º–µ—Ç—Ä token –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω ‚Äî –∏–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –∏ —Ç–∞–∫ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç.
 */
export async function logout(token?: string): Promise<void> {
  await apiClient.post(
    '/auth/logout',
    {},
    {
      headers: token
        ? (h => {
            if (typeof (h as any).set === 'function') {
              (h as any).set('Authorization', `Bearer ${token}`);
              return h;
            }
            return { ...(h || {}), Authorization: `Bearer ${token}` };
          })((apiClient.defaults.headers.common as any) ?? {})
        : undefined,
    }
  );
}
